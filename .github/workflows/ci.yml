
name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout this repository
      uses: actions/checkout@v3

    - name: Get Git Version
      run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
    - name: Login to DockerHub
      run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
    
    ### Python engine ###

    # - name: Set up Python
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: '3.12'

    # - name: Install dependencies
    #   working-directory: ./python-service
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install -r requirments.txt

    # - name: Run tests
    #   working-directory: ./python-service
    #   env:
    #     DATABASE_USERNAME: postgres
    #     DATABASE_PASSWORD: ""
    #     DB_ENDPOINT: localhost:5432
    #     DB_NAME: postgres
    #   run: |
    #     pytest test.py

    ### Spring Boot ###
    # - name: Set up JDK 17
    #   uses: actions/setup-java@v3
    #   with:
    #     distribution: 'temurin'
    #     java-version: 17
    #     cache: 'maven'

    # - name: Test backend
    #   working-directory: ./backend
    #   run: |
    #     ./mvnw test

    ### React Frontend ###
    # - name: Set up Node.js
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: '18'

    # - name: Install frontend dependencies
    #   working-directory: ./frontend
    #   run: npm install
      
    # - name: Run React tests
    #   working-directory: ./frontend
    #   run: npm test

    # - name: deploy frontend
    #   working-directory: ./frontend
    #   run: echo "deploy frontend"

    # - name: Build and Push Python-engine Images
    #   working-directory: ./python-service
    #   run: |
    #     docker build -t andyg2025/python-engine:$VERSION .
    #     docker push andyg2025/python-engine:$VERSION

    # - name: Build and Push spring backend Images
    #   working-directory: ./backend
    #   run: |
    #     ./mvnw clean package -DskipTests && docker build -t andyg2025/backend:$VERSION .
    #     docker push andyg2025/backend:$VERSION


    - name: Checkout other repositories
      uses: actions/checkout@v4
      with:
        repository: TriByteGenius/argo
        token: ${{ secrets.GH_TOKEN }}

    - name: Modify the deployment.yaml
      run: |
        git config --global user.email "ci-bot---1@example.com"
        git config --global user.name "ci-bot---1"
        sed -i -e "s/andyg2025\/python-engine:.*/andyg2025\/python-engine:$VERSION/g" python-engine.yaml
        sed -i -e "s/andyg2025\/backend:.*/andyg2025\/backend:$VERSION/g" backend.yaml
        git add -A
        git commit -m "Update yaml files to $new_ver"
        git push